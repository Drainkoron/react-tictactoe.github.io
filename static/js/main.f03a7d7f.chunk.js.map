{"version":3,"sources":["styles/GameContainer.module.css","styles/GameSettings.module.css","serviceWorker.js","components/GameContainer.jsx","components/GameSettings.jsx","App.js","render.js","state.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","GameContainer","props","checkGame","x","y","sData","mainCounter","wll","GameMap","current","linesList","forEach","element","list","cords1","cords2","push","length","response","size","w","h","updateData","e","setState","height","innerHeight","width","innerWidth","itemsGridData","getItemsGridData","state","setWinningItems","data","i","j","index","winningItemsList","clickEvent","isGameEnded","status","$item","target","parentElement","getAttribute","Math","floor","currentPlayer","checked","actions","GameEnd","setNewItem","itemSize","itemsInRow","min","getGameMap","matrix","getItemClassList","cnt","classList","s","item","winning","left","right","top","bottom","getItemContent","getItems","items","itemStyle","item-type","item-index","key","className","join","style","endGameContainer","endGameWindow","textContainer","gameEndResponse","GameContainerRef","React","createRef","this","addEventListener","removeEventListener","ref","gridTemplateColumns","Component","GameSettings","setInputs","inputContainer","formRef","name","onSubmit","event","type","data-item","max","defaultValue","wllMaxValue","button","value","buttonValue","inputChange","preventDefault","buttonClick","container","App","GameFunc","rerenderEntireTree","ReactDOM","render","StrictMode","document","getElementById","GameStatus","parseInt","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f03a7d7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameContainer\":\"GameContainer_GameContainer__1Qhbe\",\"endGameWindow\":\"GameContainer_endGameWindow__1CsZa\",\"textContainer\":\"GameContainer_textContainer__25qwD\",\"item\":\"GameContainer_item__3krQp\",\"top\":\"GameContainer_top__3p3-L\",\"bottom\":\"GameContainer_bottom__1BE9Z\",\"right\":\"GameContainer_right__3AK6j\",\"left\":\"GameContainer_left__1LiCS\",\"winning\":\"GameContainer_winning__19Ixl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GameSettings_container__2Ok1P\",\"inputContainer\":\"GameSettings_inputContainer__3p2Ez\",\"button\":\"GameSettings_button__1uUdh\"};","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport s from '../styles/GameContainer.module.css';\r\n\r\nclass GameContainer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.actions = props.actions\r\n        this.sData = props.state\r\n        this.GameContainerRef = React.createRef()\r\n        this.checked = null\r\n        if(!this.sData.GameMap){\r\n            this.sData.GameMap = this.getGameMap()\r\n            this.mainCounter = this.sData.mainCounter\r\n        }\r\n        \r\n        this.state = { \r\n            height: window.innerHeight, \r\n            width: window.innerWidth,\r\n            itemsGridData: '',\r\n        };\r\n    }\r\n\r\n    checkGame = (x, y) => {\r\n        if(this.sData.mainCounter < this.sData.wll * 2 - 1)\r\n            return\r\n        \r\n        const directions = [\r\n            [[0, -1],[0, 1]],\r\n            [[-1, 0],[1, 0]],\r\n            [[-1, -1],[1, 1]],\r\n            [[1, -1],[-1, 1]]\r\n        ]\r\n        const { GameMap } = this.sData\r\n        let current = GameMap[y][x]\r\n        let linesList = []\r\n\r\n        directions.forEach(element => {\r\n            let list = []\r\n            let cords1 = [y, x]\r\n            let cords2 = [y, x]\r\n            while(true){\r\n                cords1[0] += element[0][0]\r\n                cords1[1] += element[0][1]\r\n                \r\n                if(GameMap[cords1[0]][cords1[1]] === current)\r\n                    list.push([cords1[0], cords1[1]])\r\n                else{\r\n                    break\r\n                }\r\n            }\r\n            while(true){\r\n                cords2[0] += element[1][0]\r\n                cords2[1] += element[1][1]\r\n                \r\n                if(GameMap[cords2[0]][cords2[1]] === current)\r\n                    list.push([cords2[0], cords2[1]])\r\n                else{\r\n                    break\r\n                }\r\n            }\r\n\r\n            list.push([y, x])\r\n            if(list.length >= this.sData.wll)\r\n                linesList.push(list)\r\n        });\r\n\r\n        if(linesList.length > 0)\r\n            return {linesList, response:`${current} wins`}\r\n        \r\n\r\n        if(this.sData.mainCounter >= (this.sData.size.w - 2) * (this.sData.size.h - 2))\r\n            return {linesList, response:\"Draw\"}\r\n        \r\n        return null    \r\n    }\r\n\r\n    updateData = (e) => {\r\n        this.setState({\r\n            height: window.innerHeight, \r\n            width: window.innerWidth,\r\n            itemsGridData: this.getItemsGridData(this.sData.size, this.state.width),\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            winningItemsList: [],\r\n            itemsGridData: this.getItemsGridData(this.sData.size, this.state.width),\r\n        });\r\n        window.addEventListener('resize', this.updateData);\r\n        window.addEventListener('click', this.clickEvent);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateData);\r\n        window.removeEventListener('click', this.clickEvent);\r\n    }\r\n\r\n    setWinningItems = (data) => {\r\n        let { linesList } = data\r\n        \r\n        linesList.forEach(i => {\r\n            i.forEach(j => {\r\n                let y = j[0] - 1\r\n                let x = j[1] - 1\r\n                let index = (this.sData.size.w - 2) * (y) + (x)\r\n                this.sData.winningItemsList[index] = true\r\n            }); \r\n        });\r\n    }\r\n\r\n    clickEvent = (e) => {\r\n        if(this.sData.isGameEnded.status || this.sData.isGameEnded.status === null)\r\n            return \r\n\r\n        let $item = e.target\r\n        let { GameMap } = this.sData\r\n\r\n        if($item.parentElement.getAttribute('item-type') === 'item')\r\n            $item = $item.parentElement\r\n\r\n        let x = $item.getAttribute('item-index') % (this.sData.size.w - 2) + 1\r\n        let y = Math.floor($item.getAttribute('item-index') / (this.sData.size.w - 2)) + 1\r\n        \r\n        if(GameMap[y][x] === '#' && $item.getAttribute('item-type') === 'item'){\r\n            if(this.sData.currentPlayer)\r\n                GameMap[y][x] = 'x'\r\n            else \r\n                GameMap[y][x] = 'o'\r\n            \r\n            this.sData.GameMap = GameMap\r\n            this.checked = this.checkGame(x, y)\r\n            \r\n            if(this.checked != null){\r\n                this.setWinningItems(this.checked)\r\n                this.actions.GameEnd(this.checked.response)\r\n            }\r\n            this.actions.setNewItem()\r\n        }\r\n    }\r\n\r\n    getItemsGridData = (size, width) => {\r\n        let itemSize = 60 \r\n        let itemsInRow = size.w - 2\r\n        \r\n        itemSize = Math.min(Math.floor(width/size.w), itemSize)\r\n        return { itemsInRow, itemSize }\r\n    }\r\n\r\n    getGameMap = () => {\r\n        const { w, h } = this.sData.size\r\n        \r\n        var matrix = []\r\n        for(var i=0; i<h; i++) {\r\n            matrix[i] = [];\r\n            for(var j=0; j<w; j++) {\r\n                matrix[i][j] = '#';\r\n            }\r\n        }\r\n\r\n        return matrix\r\n    }\r\n\r\n    getItemClassList = (data) => {\r\n        const { j, i, w, h, cnt } = data\r\n\r\n        let classList = [s.item]\r\n        \r\n        if(this.sData.isGameEnded.status && this.sData.winningItemsList[cnt])\r\n            classList.push(s.winning)\r\n        if(j === 1)\r\n            classList.push(s.left)\r\n        if(j === w - 2)\r\n            classList.push(s.right)\r\n        if(i === 1)\r\n            classList.push(s.top)\r\n        if(i === h - 2)\r\n            classList.push(s.bottom)\r\n        \r\n        return classList\r\n    }\r\n\r\n    getItemContent = (i, j) => {\r\n        if(this.sData.GameMap[i][j] === 'x' || this.sData.GameMap[i][j] === 'o')\r\n            return <p>{this.sData.GameMap[i][j]}</p>\r\n    }   \r\n\r\n    getItems = () => {\r\n        let items = [], cnt = 0\r\n        const { getItemClassList } = this\r\n        const { w, h } = this.sData.size\r\n\r\n        let itemStyle = {\r\n            height:`${this.state.itemsGridData.itemSize}px`, \r\n            width:`${this.state.itemsGridData.itemSize}px`\r\n        }\r\n        \r\n        for(let i = 1; i < h - 1; i++){\r\n            for(let j = 1; j < w - 1; j++){\r\n                items.push(<div item-type={'item'} item-index={cnt} key={`item${cnt}`} className={getItemClassList({ j, i, w, h, cnt }).join(' ')} style={itemStyle}>\r\n                    {this.getItemContent(i, j)}\r\n                </div>)\r\n                cnt += 1\r\n            }\r\n        }   \r\n        return items\r\n    }\r\n    \r\n    endGameContainer = () => {\r\n        if(this.sData.isGameEnded.status){\r\n            \r\n            return (\r\n                <div className={s.endGameWindow}>\r\n                    <div className={s.textContainer}> \r\n                        <p>{this.sData.isGameEnded.gameEndResponse}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render (){\r\n        return(\r\n            <div> \r\n                <div ref = { this.GameContainerRef } className = { s.GameContainer } style={{gridTemplateColumns: `repeat(${this.state.itemsGridData.itemsInRow}, ${this.state.itemsGridData.itemSize}px)`}}>\r\n                    { this.getItems(this.sData.size) }\r\n                </div>\r\n                { this.endGameContainer() } \r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport { GameContainer }","import React from 'react';\r\nimport s from '../styles/GameSettings.module.css';\r\n\r\nclass GameSettings extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.formRef = React.createRef()\r\n        this.sData = props.state\r\n        this.actions = props.actions\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener(\"change\", this.actions.inputChange)\r\n    }\r\n\r\n    onSubmit(event, actions){\r\n        event.preventDefault();\r\n        actions.buttonClick()\r\n    }\r\n\r\n    setInputs = () => {\r\n        return(\r\n            <div className={s.inputContainer}>\r\n                <form ref={this.formRef} name=\"gameSettings\" onSubmit={(event) => {\r\n                    this.onSubmit(event, this.actions)\r\n                }}>\r\n                    <div className={s.inputContainer}>\r\n                        <label>Width</label>\r\n                        <input type=\"number\" name=\"w\" data-item=\"gsInp\" min=\"3\" max=\"12\" defaultValue=\"3\"/>\r\n                    </div>\r\n                    <div className={s.inputContainer}>\r\n                        <label>Height</label>\r\n                        <input type=\"number\" name=\"h\" data-item=\"gsInp\" min=\"3\" max=\"12\" defaultValue=\"3\"/>\r\n                    </div>\r\n                    <div className={s.inputContainer}>\r\n                        <label>Winning line length</label>\r\n                        <input type=\"number\" name=\"wll\" data-item=\"gsInp\" min=\"3\" max={this.sData.wllMaxValue} defaultValue=\"3\"/>\r\n                    </div>\r\n                    <input type=\"submit\" name=\"button\" className={s.button} value={this.sData.buttonValue}/>    \r\n                </form>    \r\n            </div>\r\n        )\r\n    };\r\n\r\n    render (){        \r\n        return(\r\n            <div className={s.container}>\r\n                {this.setInputs()}\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport { GameSettings }","import React from 'react';\nimport { GameContainer } from './components/GameContainer';\nimport { GameSettings } from './components/GameSettings';\nimport './App.css';\n\nfunction App(props) {\n  \n  const GameFunc = () =>{\n    return <GameContainer state={props.state.GameContainer} actions={props.actions.GameContainer}/>\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-mainContent\">\n        <div>\n          <GameSettings state={props.state.GameSettings} actions={props.actions.GameSettings}/>\n        </div>\n        {<GameFunc />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nconst rerenderEntireTree = (props) => {\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <App state={props.state} actions={props.actions}/>\r\n      </React.StrictMode>,\r\n      document.getElementById('root')\r\n    );\r\n}\r\n\r\nexport { rerenderEntireTree }","import { rerenderEntireTree } from './render'\r\n\r\nlet state = {\r\n    GameContainer:{\r\n        mainCounter: 1,\r\n        currentPlayer: true,\r\n        GameMap:null,\r\n        GameStatus:false,\r\n        winningItemsList:[],\r\n        isGameEnded:{\r\n            status:null,\r\n            gameEndResponse:null\r\n        },\r\n        wll:3,\r\n        size:{\r\n            w:5, \r\n            h:5 \r\n        }\r\n    },\r\n    GameSettings:{\r\n        width:3, \r\n        height:3, \r\n        wll:3,\r\n        wllMaxValue:3,\r\n        buttonValue:'play'\r\n    }\r\n}\r\n\r\nlet actions = {\r\n    GameContainer:{\r\n        setNewItem(){\r\n            state.GameContainer.mainCounter += 1\r\n            state.GameContainer.currentPlayer = !state.GameContainer.currentPlayer\r\n            rerenderEntireTree({state, actions})\r\n        },\r\n\r\n        GameEnd(response){\r\n            state.GameContainer.isGameEnded.status = true\r\n            state.GameContainer.GameStatus = false\r\n            state.GameContainer.isGameEnded.gameEndResponse = response\r\n            rerenderEntireTree({state, actions})\r\n        },\r\n    },\r\n    GameSettings:{\r\n        inputChange(e){\r\n            if(e.target.getAttribute('data-item') === 'gsInp'){\r\n                switch(e.target.getAttribute('name')){\r\n                    case 'w':\r\n                        state.GameSettings.width = parseInt(e.target.value)\r\n                        break\r\n                    case 'h':\r\n                        state.GameSettings.height = parseInt(e.target.value)\r\n                        break\r\n                    case 'wll':\r\n                        state.GameSettings.wll = parseInt(e.target.value)\r\n                        break\r\n                    default:\r\n                        break\r\n                }\r\n\r\n                state.GameSettings.wllMaxValue = Math.min(state.GameSettings.width, state.GameSettings.height)\r\n                if(state.GameSettings.wll > Math.min(state.GameSettings.width, state.GameSettings.height)){\r\n                    state.GameSettings.wll = Math.min(state.GameSettings.width, state.GameSettings.height)\r\n                }\r\n                \r\n                rerenderEntireTree({state, actions})\r\n            }\r\n        },\r\n\r\n        buttonClick(){\r\n            state.GameContainer.size.w = state.GameSettings.width + 2\r\n            state.GameContainer.size.h = state.GameSettings.height + 2\r\n            state.GameContainer.wll = state.GameSettings.wll\r\n            state.GameContainer.winningItemsList = []\r\n            state.GameContainer.currentPlayer = true\r\n            state.GameContainer.GameMap = null\r\n            state.GameContainer.mainCounter = 1\r\n            state.GameContainer.isGameEnded.status = false\r\n            state.GameSettings.buttonValue = 'replay'\r\n            state.GameContainer.GameStatus = true\r\n            \r\n            rerenderEntireTree({state, actions})\r\n        }\r\n    }\r\n}\r\n\r\nexport { state, actions }","import './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { rerenderEntireTree } from './render'\nimport { state, actions } from './state'\n\nrerenderEntireTree({state, actions})\nserviceWorker.unregister();\n"],"sourceRoot":""}